#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 29 10:00:53 2019

@author: lalita
"""
#Generation of data as per given MATLAB script
import numpy as np
import time
import matplotlib.pyplot as plt
#problem dimension 

n=50
#condition number
c=1000
#gnerating data matrix Q
#np.random.seed(2)
A=np.random.randn(n,n)
u, s, vh = np.linalg.svd(A, full_matrices=True)
s_diag=np.diag(s)
alpha = (c*s_diag[n-1,n-1]/s_diag[0,0])**(1/(n-1)) 
a=[]
for i in range(0,n):
    a.append(alpha**(n-i))
s_diag=s_diag*np.diag(a)
Q=u.T*s_diag*u

#generating vector b
b=np.random.randn(n,1)
#%%
#initial guess vector

x=np.ones((n), dtype=int)
x=x.reshape(n,1)
x_T=x.reshape((n,1)).T 


#%%
# the cost function
def func(x):
    return 0.5*(np.matmul(np.matmul(x.T,Q),x))+np.matmul(b.T,x) 

# first order derivatives of the function
def dfunc(x):
    df = Q.dot(x.reshape(n,1))+b
    return (df)
#%%Q3.1
#Armijo Stepsize Selection Algorithm
def armijo(old,beta, sigma,niters):
    
    S = 1
    leftf=[]
    rightf=[]
    
#Armijo rule condition to satisfy sufficient descent on next iteration for selection of stepsize
    for i in range(0,niters):
        #value for x in next iteration
        new = old+(beta**i)*S*(-dfunc(old))  
        #LHS of Armijo rule condition
        leftf.append(func(old) - func(new))
        #RHS of Armijo rule condition
        rightf.append(-sigma*(beta**i)*S*(np.matmul((dfunc(old)).T,-dfunc(old))))
    return leftf, rightf
Q.dot(x.reshape(n,1))+b
        
#%%
   
# initialization
old = x.reshape(n,1)
#direction = -dfunc(x)
maximum_iterations =20
#Checking Armijo Rule condition for sigma=beta=0.25
t1_armijo=time.time()
leftf,rightf=armijo(old,0.25,0.25, maximum_iterations)
#index[0] is the iteration where the method converges
index=[]
for i in range(0,len(leftf)):
    if (leftf[i] >= rightf[i]):
        index.append(i)
#final step size where Steepest descent converges
stepsize= 0.25**(index[0])   
#beta = 0.25
#sigma = 0.25
S = 1
#S=1
#new value of x for step size selected by Armijo rule
x_new = old+(0.25**(index[0]))*S*(-dfunc(old))
t2_armijo=time.time()
t_armijo=t2_armijo-t1_armijo

cost_armijo=func(x_new)
step_armijo=stepsize


cost=[func(x)]
x_A=[x]
t_A=[0]
for k in range(0,10):
    t1= time.time()
    x_A.append(x_A[k]+(0.25**(k)*S*(-dfunc(x_A[k]))))
    cost.append(func(x_A[k]))
    t2=time.time()
    t_A.append(t2-t1)
   
x_axis = [0,1,2,3,4,5,6,7,8,9,10]
y_axis = [cost]
plt.scatter(x_axis, y_axis)
plt.title('Armijo Rule:Scatter plot for Iteration vs Cost,n=50,c=1000')
plt.xlabel('iteration')
plt.ylabel('cost')
plt.show()    

x_axis = [0,1,2,3,4,5,6,7,8,9,10]
y_axis = t_A
plt.scatter(x_axis, y_axis)
plt.title('Armijo Rule:Scatter plot for Iteration vs Time,n=50,c=1000')
plt.xlabel('iteration')
plt.ylabel('time')
plt.show()    

    

#
#%%Q3.2  Diagonal Scaling Gradient Descent
#Hessian of our cost function is Q
t1_DS=time.time()
Hess = Q
#user defined threshold for stopping criteria
epsilon = 5 
#calculating inverse of hessian for D_k
hess_inv = np.linalg.inv(Q)
#first order derivative of function
df = dfunc(x)
#range of constant step sizes
#s_d =np.arange(0.001,1000,0.001)     #constant step sizes' range                #0.001 true
s_d = np.arange(0.1,1000,0.1)
x_new_diagscal = []
step=[]
for i in range(0,len(s_d)):
    x_new_diagscal.append(x - s_d[i]*np.matmul(hess_inv,df))
    if (np.sum(np.abs(x_new_diagscal[i] -x_new_diagscal[i-1] ))) < epsilon:
        step.append(s_d[i])
x_new_diagscal = x - step[-1]*np.matmul(hess_inv,df)
cost_DS = func(x_new_diagscal)
t2_DS=time.time()
t_DS=t2_DS-t1_DS


cost=[func(x)]
x_A=[x]
t_A=[0]
for k in range(0,102):
    t1= time.time()
    x_A.append(x - s_d[k]*np.matmul(hess_inv,df))
    cost.append(func(x_A[k+1]))
    t2=time.time()
    t_A.append(t2-t1)
   
x_axis = np.arange(0,10)
y_axis = [cost[0:10]]
plt.scatter(x_axis, y_axis)
plt.title('DS:Scatter plot for Iteration vs Cost,n=50,c=1000')
plt.xlabel('iteration')
plt.ylabel('cost')
plt.show()    

x_axis = np.arange(0,103)
y_axis = t_A
plt.scatter(x_axis, y_axis)
plt.title('DS:Scatter plot for Iteration vs Time,n=50,c=1000')
plt.xlabel('iteration')
plt.ylabel('time')
plt.show()    

#%% Q3.3 new CG
t1_CG=time.time()
x0=x
g0=dfunc(x0)
d0=-g0
alpha0=(-np.matmul(d0.T,dfunc(x0))/np.matmul(np.matmul(d0.T,Q),d0))
x1 = x0+alpha0*d0
g1 = dfunc(x1)
beta1= np.matmul(g1.T,g1)/np.matmul(g0.T,g0) #factor beta_1 at 1st iteration to calculate direction
d1 = -g1+beta1*d0  #direction d_1 at 1st iteration
alpha1 = (-np.matmul(d1.T,dfunc(x1))/np.matmul(np.matmul(d1.T,Q),d1)) #calculating alpha_1
alpha = [alpha0, alpha1] #initializing lists for stepsize=alpha, X, G(=gradient(f(x))), D=list for directions for k iterations, B= list for beta values at k iterations
X = [x0,x1]
G = [g0, g1]
D = [d0, d1]
B =[0 , beta1]

r=2 #iteration value
while (np.sum(np.abs(X[r-1] - X[r-2])) > 1e-2 and r<5000): #stopping criteria
    X.append(X[r-1]+alpha[r-1]*D[r-1])  #appending X value for rth iteration>=2
    G.append(dfunc(X[r]))     #appending G value for rth iteration>=2
    B.append(np.matmul(G[r].T,G[r])/np.matmul(G[r-1].T,G[r-1]))  #appending B value for rth iteration>=2
    D.append(-G[r]+B[r]*D[r-1])  #appending D value for rth iteration>=2
    
    alpha.append(-np.matmul(D[r].T,dfunc(X[r]))/np.matmul(np.matmul(D[r].T,Q),D[r]))  #appending alpha value for rth iteration>=2
    
    r =r+1    
x_new_CG=X[-1]
step_CG=alpha[-1]
cost_CG=func(x_new_CG)  
t2_CG=time.time()
t_CG=t2_CG-t1_CG 


cost=[func(x)]
x_A=X
t_A=[0]
for k in range(0,10):
    t1= time.time()
    
    cost.append(func(x_A[k]))
    t2=time.time()
    t_A.append(t2-t1)
   
x_axis = np.arange(0,11)
y_axis = [cost]
plt.scatter(x_axis, y_axis)
plt.title('CG:Scatter plot for Iteration vs Cost,n=50,c=1000')
plt.xlabel('iteration')
plt.ylabel('cost')
plt.show()    

x_axis = np.arange(0,11)
y_axis = t_A
plt.scatter(x_axis, y_axis)
plt.title('CG:Scatter plot for Iteration vs Time,n=50,c=1000')
plt.xlabel('iteration')
plt.ylabel('time')
plt.show()   
#%%

# Plot

x_axis = [0,t_armijo,t_DS,t_CG]
y_axis = [func(x),cost_armijo,cost_DS,cost_CG]
plt.scatter(x_axis, y_axis)
plt.title('Scatter plot for Cost vs Time,n=100,c=10')
plt.xlabel('cost')
plt.ylabel('time')
plt.show()
